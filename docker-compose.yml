version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: advancegpt-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DOCKER_POSTGRES_USER:-advancegpt}
      POSTGRES_PASSWORD: ${DOCKER_POSTGRES_PASSWORD:-changeme}
      POSTGRES_DB: ${DOCKER_POSTGRES_DB:-advancegpt}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - advancegpt-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U advancegpt"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: advancegpt-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - advancegpt-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ChromaDB - Vector Database for Memory
  chromadb:
    image: chromadb/chroma:latest
    container_name: advancegpt-chromadb
    restart: unless-stopped
    ports:
      - "8001:8000"
    volumes:
      - chroma_data:/chroma/chroma
    environment:
      - IS_PERSISTENT=TRUE
      - ANONYMIZED_TELEMETRY=FALSE
    networks:
      - advancegpt-network

  # n8n - Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: advancegpt-n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD:-changeme}
      - N8N_HOST=${N8N_HOST:-localhost}
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - NODE_ENV=production
      - WEBHOOK_URL=http://localhost:5678/
      - GENERIC_TIMEZONE=America/New_York
    volumes:
      - n8n_data:/home/node/.n8n
      - ./automation/workflows:/workflows
    networks:
      - advancegpt-network
    depends_on:
      - postgres

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: advancegpt-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=8000
      - DATABASE_URL=postgresql://${DOCKER_POSTGRES_USER:-advancegpt}:${DOCKER_POSTGRES_PASSWORD:-changeme}@postgres:5432/${DOCKER_POSTGRES_DB:-advancegpt}
      - REDIS_URL=redis://redis:6379
      - CHROMA_DB_HOST=chromadb
      - CHROMA_DB_PORT=8000
      - N8N_WEBHOOK_URL=http://n8n:5678/webhook
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    volumes:
      - ./backend:/app
      - /app/node_modules
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    networks:
      - advancegpt-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      chromadb:
        condition: service_started

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: advancegpt-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_APP_NAME=AdvanceGPT
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - advancegpt-network
    depends_on:
      - backend

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  chroma_data:
    driver: local
  n8n_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local

networks:
  advancegpt-network:
    driver: bridge
